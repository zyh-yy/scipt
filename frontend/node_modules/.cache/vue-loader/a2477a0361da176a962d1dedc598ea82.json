{"remainingRequest":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\components\\ScriptCountChart.vue?vue&type=style&index=0&id=0c772e6a&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\components\\ScriptCountChart.vue","mtime":1747320496914},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1747314279928},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1747314282996},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1747314281070},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1747315066811},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747314279003},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747314281934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY2hhcnQtY2FyZCB7DQogIG1hcmdpbi1ib3R0b206IDIwcHg7DQogIA0KICAuY2FyZC1oZWFkZXIgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgDQogICAgaDMgew0KICAgICAgbWFyZ2luOiAwOw0KICAgICAgZm9udC1zaXplOiAxNnB4Ow0KICAgICAgZm9udC13ZWlnaHQ6IDUwMDsNCiAgICB9DQogIH0NCiAgDQogIC5jaGFydCB7DQogICAgaGVpZ2h0OiAzMDBweDsNCiAgICBtYXJnaW4tdG9wOiAxMHB4Ow0KICB9DQp9DQo="},{"version":3,"sources":["ScriptCountChart.vue"],"names":[],"mappings":";AAuPA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ScriptCountChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"script-count-chart\">\r\n    <el-card class=\"chart-card\" v-loading=\"loading\">\r\n      <div slot=\"header\" class=\"card-header\">\r\n        <h3>脚本数量变化</h3>\r\n        <el-select \r\n          v-model=\"timeRange\" \r\n          size=\"small\" \r\n          @change=\"fetchData\"\r\n        >\r\n          <el-option label=\"最近30天\" value=\"30\"></el-option>\r\n          <el-option label=\"最近90天\" value=\"90\"></el-option>\r\n          <el-option label=\"最近半年\" value=\"180\"></el-option>\r\n          <el-option label=\"最近一年\" value=\"365\"></el-option>\r\n        </el-select>\r\n      </div>\r\n      <v-chart class=\"chart\" :option=\"chartOption\" autoresize />\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport VChart from 'vue-echarts';\r\n\r\nexport default {\r\n  name: 'ScriptCountChart',\r\n  components: {\r\n    VChart\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      timeRange: '90',\r\n      chartOption: {\r\n        title: {\r\n          text: '脚本数量变化',\r\n          left: 'center'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['新增脚本', '累计脚本'],\r\n          bottom: 10\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '15%',\r\n          top: '15%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisLabel: {\r\n            rotate: 45\r\n          }\r\n        },\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '新增数量',\r\n            position: 'left',\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#E6A23C'\r\n              }\r\n            },\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '累计数量',\r\n            position: 'right',\r\n            axisLine: {\r\n              lineStyle: {\r\n                color: '#409EFF'\r\n              }\r\n            },\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '新增脚本',\r\n            type: 'bar',\r\n            data: [],\r\n            itemStyle: {\r\n              color: '#E6A23C'\r\n            }\r\n          },\r\n          {\r\n            name: '累计脚本',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: [],\r\n            symbol: 'circle',\r\n            symbolSize: 8,\r\n            itemStyle: {\r\n              color: '#409EFF'\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n  },\r\n  methods: {\r\n    async fetchData() {\r\n      this.loading = true;\r\n      \r\n      try {\r\n        // 计算日期范围\r\n        const endDate = new Date();\r\n        const startDate = new Date();\r\n        startDate.setDate(endDate.getDate() - parseInt(this.timeRange));\r\n        \r\n        // 获取脚本列表\r\n        const response = await axios.get('/api/scripts');\r\n        \r\n        if (response.data.code === 0) {\r\n          this.processData(response.data.data);\r\n        } else {\r\n          this.$message.error(response.data.message || '获取脚本数据失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取脚本数据失败: ' + error.message);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    processData(scripts) {\r\n      if (!scripts || !scripts.length) {\r\n        return;\r\n      }\r\n      \r\n      // 先解析创建时间，并按时间排序\r\n      const scriptsWithTime = scripts.map(script => {\r\n        return {\r\n          ...script,\r\n          created_time: new Date(script.created_at)\r\n        };\r\n      }).sort((a, b) => a.created_time - b.created_time);\r\n      \r\n      // 确定日期范围和间隔\r\n      const days = parseInt(this.timeRange);\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      startDate.setDate(endDate.getDate() - days);\r\n      \r\n      // 决定日期分组方式\r\n      let interval = 'day';\r\n      let format = 'MM-DD';\r\n      \r\n      if (days > 120) {\r\n        interval = 'week';\r\n        format = 'yyyy-MM-DD';\r\n      } else if (days > 60) {\r\n        interval = 'week';\r\n        format = 'MM-DD';\r\n      }\r\n      \r\n      // 根据间隔创建日期分组\r\n      const dateGroups = [];\r\n      const currentDate = new Date(startDate);\r\n      \r\n      while (currentDate <= endDate) {\r\n        const dateKey = this.formatDate(currentDate, format);\r\n        dateGroups.push({\r\n          date: new Date(currentDate),\r\n          dateKey,\r\n          count: 0\r\n        });\r\n        \r\n        // 根据间隔增加日期\r\n        if (interval === 'day') {\r\n          currentDate.setDate(currentDate.getDate() + 1);\r\n        } else if (interval === 'week') {\r\n          currentDate.setDate(currentDate.getDate() + 7);\r\n        }\r\n      }\r\n      \r\n      // 统计每个时间段内的新增脚本数量\r\n      scriptsWithTime.forEach(script => {\r\n        if (script.created_time >= startDate && script.created_time <= endDate) {\r\n          // 找到脚本创建时间对应的日期组\r\n          for (let i = 0; i < dateGroups.length; i++) {\r\n            // 如果是最后一个组或者创建时间小于下一个组的日期，则计入当前组\r\n            if (i === dateGroups.length - 1 || script.created_time < dateGroups[i + 1].date) {\r\n              dateGroups[i].count++;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 处理累计数\r\n      let totalCount = scriptsWithTime.filter(s => s.created_time < startDate).length;\r\n      const cumulativeCounts = [];\r\n      \r\n      dateGroups.forEach(group => {\r\n        totalCount += group.count;\r\n        cumulativeCounts.push(totalCount);\r\n      });\r\n      \r\n      // 更新图表数据\r\n      this.chartOption.xAxis.data = dateGroups.map(g => g.dateKey);\r\n      this.chartOption.series[0].data = dateGroups.map(g => g.count);\r\n      this.chartOption.series[1].data = cumulativeCounts;\r\n      \r\n      // 更新标题\r\n      this.chartOption.title.text = `脚本数量变化 (${this.formatDate(startDate, 'yyyy-MM-dd')} 至 ${this.formatDate(endDate, 'yyyy-MM-dd')})`;\r\n    },\r\n    formatDate(date, format = 'yyyy-MM-dd') {\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      \r\n      if (format === 'yyyy-MM-dd') {\r\n        return `${year}-${month}-${day}`;\r\n      } else if (format === 'MM-DD') {\r\n        return `${month}-${day}`;\r\n      } else if (format === 'yyyy-MM') {\r\n        return `${year}-${month}`;\r\n      }\r\n      \r\n      return `${year}-${month}-${day}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n  \r\n  .card-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    \r\n    h3 {\r\n      margin: 0;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n  \r\n  .chart {\r\n    height: 300px;\r\n    margin-top: 10px;\r\n  }\r\n}\r\n</style>\r\n"]}]}