{"remainingRequest":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\components\\ScriptExecutionTrend.vue?vue&type=style&index=0&id=54a58740&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\components\\ScriptExecutionTrend.vue","mtime":1747319762523},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1747314279928},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1747314282996},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1747314281070},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1747315066811},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747314279003},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747314281934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY2hhcnQtY2FyZCB7DQogIG1hcmdpbi1ib3R0b206IDIwcHg7DQogIA0KICAuY2FyZC1oZWFkZXIgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgDQogICAgaDMgew0KICAgICAgbWFyZ2luOiAwOw0KICAgICAgZm9udC1zaXplOiAxNnB4Ow0KICAgICAgZm9udC13ZWlnaHQ6IDUwMDsNCiAgICB9DQogIH0NCiAgDQogIC5jaGFydCB7DQogICAgaGVpZ2h0OiAzMDBweDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["ScriptExecutionTrend.vue"],"names":[],"mappings":";AAuNA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ScriptExecutionTrend.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"script-execution-trend\">\r\n    <el-card class=\"chart-card\" v-loading=\"loading\">\r\n      <div slot=\"header\" class=\"card-header\">\r\n        <h3>脚本执行趋势</h3>\r\n        <div class=\"controls\">\r\n          <el-select v-model=\"selectedScript\" size=\"small\" placeholder=\"选择脚本\" clearable @change=\"fetchTrend\">\r\n            <el-option\r\n              v-for=\"script in scripts\"\r\n              :key=\"script.id\"\r\n              :label=\"script.name\"\r\n              :value=\"script.id\"\r\n            ></el-option>\r\n          </el-select>\r\n          <el-select v-model=\"timeRange\" size=\"small\" style=\"margin-left: 10px\" @change=\"fetchTrend\">\r\n            <el-option label=\"最近7天\" value=\"7\"></el-option>\r\n            <el-option label=\"最近30天\" value=\"30\"></el-option>\r\n            <el-option label=\"最近90天\" value=\"90\"></el-option>\r\n          </el-select>\r\n        </div>\r\n      </div>\r\n      <v-chart class=\"chart\" :option=\"trendOption\" autoresize />\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { mapState } from 'vuex';\r\nimport VChart from 'vue-echarts';\r\n\r\nexport default {\r\n  name: 'ScriptExecutionTrend',\r\n  components: {\r\n    VChart\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      selectedScript: null,\r\n      timeRange: '30',\r\n      trendData: [],\r\n      trendOption: {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['执行次数', '成功率', '平均执行时间']\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: [],\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '执行次数',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '百分比/时间',\r\n            min: 0,\r\n            max: 100,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '执行次数',\r\n            type: 'bar',\r\n            data: [],\r\n            color: '#409eff'\r\n          },\r\n          {\r\n            name: '成功率',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: [],\r\n            color: '#67c23a',\r\n            symbol: 'circle',\r\n            symbolSize: 8\r\n          },\r\n          {\r\n            name: '平均执行时间',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: [],\r\n            color: '#e6a23c',\r\n            symbol: 'triangle',\r\n            symbolSize: 8\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['scripts'])\r\n  },\r\n  mounted() {\r\n    this.fetchScripts();\r\n  },\r\n  methods: {\r\n    fetchScripts() {\r\n      if (this.scripts.length === 0) {\r\n        this.$store.dispatch('fetchScripts').then(() => {\r\n          if (this.scripts.length > 0) {\r\n            this.selectedScript = this.scripts[0].id;\r\n            this.fetchTrend();\r\n          }\r\n        });\r\n      } else {\r\n        this.selectedScript = this.scripts[0].id;\r\n        this.fetchTrend();\r\n      }\r\n    },\r\n    async fetchTrend() {\r\n      if (!this.selectedScript) return;\r\n      \r\n      this.loading = true;\r\n      \r\n      try {\r\n        // 计算日期范围\r\n        const endDate = new Date();\r\n        const startDate = new Date();\r\n        startDate.setDate(endDate.getDate() - parseInt(this.timeRange));\r\n        \r\n        const params = {\r\n          period: 'day',\r\n          script_id: this.selectedScript,\r\n          start_date: this.formatDate(startDate),\r\n          end_date: this.formatDate(endDate)\r\n        };\r\n        \r\n        const response = await axios.get('/api/execution/statistics', { params });\r\n        \r\n        if (response.data.code === 0) {\r\n          this.trendData = response.data.data;\r\n          this.updateChart();\r\n        } else {\r\n          this.$message.error(response.data.message || '获取趋势数据失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取趋势数据失败: ' + error.message);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n    updateChart() {\r\n      if (!this.trendData || !this.trendData.length) {\r\n        this.trendOption.xAxis[0].data = [];\r\n        this.trendOption.series[0].data = [];\r\n        this.trendOption.series[1].data = [];\r\n        this.trendOption.series[2].data = [];\r\n        return;\r\n      }\r\n      \r\n      // 提取数据\r\n      const timeLabels = this.trendData.map(item => item.time_period);\r\n      const totalCounts = this.trendData.map(item => item.total_count);\r\n      \r\n      // 计算成功率\r\n      const successRates = this.trendData.map(item => {\r\n        if (item.total_count > 0) {\r\n          return ((item.success_count / item.total_count) * 100).toFixed(2);\r\n        }\r\n        return 0;\r\n      });\r\n      \r\n      // 平均执行时间（秒）\r\n      const avgTimes = this.trendData.map(item => {\r\n        if (item.avg_execution_time) {\r\n          // 如果平均执行时间超过100秒，进行缩放以便在图表上显示\r\n          const time = Number(item.avg_execution_time);\r\n          return time > 100 ? 100 : time.toFixed(2);\r\n        }\r\n        return 0;\r\n      });\r\n      \r\n      // 更新图表\r\n      this.trendOption.xAxis[0].data = timeLabels;\r\n      this.trendOption.series[0].data = totalCounts;\r\n      this.trendOption.series[1].data = successRates;\r\n      this.trendOption.series[2].data = avgTimes;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n  \r\n  .card-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    \r\n    h3 {\r\n      margin: 0;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n  \r\n  .chart {\r\n    height: 300px;\r\n  }\r\n}\r\n</style>\r\n"]}]}