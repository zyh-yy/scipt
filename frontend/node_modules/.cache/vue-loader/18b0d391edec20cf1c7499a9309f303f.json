{"remainingRequest":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\views\\ScheduledTasks.vue?vue&type=style&index=0&id=a696b1ca&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\src\\views\\ScheduledTasks.vue","mtime":1747319029012},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1747314279928},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1747314282996},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1747314281070},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747314279003},{"path":"C:\\Users\\zhuyu\\Desktop\\study\\lijialu\\scipt\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747314281934}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouc2NoZWR1bGVkLXRhc2tzLWNvbnRhaW5lciB7DQogIHBhZGRpbmc6IDIwcHg7DQp9DQoNCi5wYWdlLWhlYWRlciB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgbWFyZ2luLWJvdHRvbTogMjBweDsNCn0NCg0KLmZpbHRlci1jYXJkIHsNCiAgbWFyZ2luLWJvdHRvbTogMjBweDsNCn0NCg0KLmZpbHRlci1jb250YWluZXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouaGludC10ZXh0IHsNCiAgZm9udC1zaXplOiAxMnB4Ow0KICBjb2xvcjogIzkwOTM5OTsNCiAgbWFyZ2luLXRvcDogNXB4Ow0KfQ0K"},{"version":3,"sources":["ScheduledTasks.vue"],"names":[],"mappings":";AAigBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ScheduledTasks.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"scheduled-tasks-container\">\r\n    <div class=\"page-header\">\r\n      <h1>定时任务</h1>\r\n      <el-button type=\"primary\" @click=\"openTaskForm()\">添加定时任务</el-button>\r\n    </div>\r\n\r\n    <el-card class=\"filter-card\">\r\n      <div class=\"filter-container\">\r\n        <el-radio-group v-model=\"activeFilter\" @change=\"loadTasks\">\r\n          <el-radio-button :label=\"null\">全部</el-radio-button>\r\n          <el-radio-button :label=\"1\">已启用</el-radio-button>\r\n          <el-radio-button :label=\"0\">已禁用</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n    </el-card>\r\n\r\n    <el-table\r\n      v-loading=\"loading\"\r\n      :data=\"tasks\"\r\n      stripe\r\n      style=\"width: 100%; margin-top: 20px\"\r\n    >\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n      <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"180\" />\r\n      <el-table-column prop=\"schedule_type\" label=\"调度类型\" width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          {{ getScheduleTypeText(scope.row.schedule_type) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"cron_expression\" label=\"Cron表达式\" min-width=\"180\" />\r\n      <el-table-column label=\"执行对象\" min-width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <div v-if=\"scope.row.script_id\">\r\n            <el-link type=\"primary\" @click=\"viewScript(scope.row.script_id)\">\r\n              脚本: {{ scope.row.script_name || `#${scope.row.script_id}` }}\r\n            </el-link>\r\n          </div>\r\n          <div v-else-if=\"scope.row.chain_id\">\r\n            <el-link type=\"primary\" @click=\"viewChain(scope.row.chain_id)\">\r\n              脚本链: {{ scope.row.chain_name || `#${scope.row.chain_id}` }}\r\n            </el-link>\r\n          </div>\r\n          <div v-else>未设置</div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\" width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.is_active ? 'success' : 'info'\">\r\n            {{ scope.row.is_active ? '已启用' : '已禁用' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"240\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button \r\n            size=\"small\"\r\n            type=\"success\" \r\n            plain\r\n            @click=\"toggleActive(scope.row)\"\r\n          >\r\n            {{ scope.row.is_active ? '禁用' : '启用' }}\r\n          </el-button>\r\n          <el-button \r\n            size=\"small\"\r\n            type=\"warning\" \r\n            plain\r\n            @click=\"openTaskForm(scope.row)\"\r\n          >\r\n            编辑\r\n          </el-button>\r\n          <el-button \r\n            size=\"small\"\r\n            type=\"danger\" \r\n            plain\r\n            @click=\"confirmDelete(scope.row)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 任务表单对话框 -->\r\n    <el-dialog\r\n      :title=\"editingTask.id ? '编辑定时任务' : '添加定时任务'\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"60%\"\r\n    >\r\n      <el-form \r\n        :model=\"editingTask\" \r\n        :rules=\"rules\" \r\n        ref=\"taskForm\" \r\n        label-width=\"120px\"\r\n      >\r\n        <el-form-item label=\"任务名称\" prop=\"name\">\r\n          <el-input v-model=\"editingTask.name\" placeholder=\"请输入任务名称\" />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"执行对象\" prop=\"execution_target\">\r\n          <el-radio-group v-model=\"executionTarget\" @change=\"handleTargetChange\">\r\n            <el-radio label=\"script\">脚本</el-radio>\r\n            <el-radio label=\"chain\">脚本链</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        \r\n        <el-form-item \r\n          label=\"选择脚本\" \r\n          prop=\"script_id\" \r\n          v-if=\"executionTarget === 'script'\"\r\n        >\r\n          <el-select \r\n            v-model=\"editingTask.script_id\" \r\n            filterable \r\n            placeholder=\"请选择脚本\"\r\n            style=\"width: 100%\"\r\n          >\r\n            <el-option \r\n              v-for=\"script in scripts\" \r\n              :key=\"script.id\" \r\n              :label=\"`${script.name} (${script.language})`\" \r\n              :value=\"script.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item \r\n          label=\"选择脚本链\" \r\n          prop=\"chain_id\" \r\n          v-if=\"executionTarget === 'chain'\"\r\n        >\r\n          <el-select \r\n            v-model=\"editingTask.chain_id\" \r\n            filterable \r\n            placeholder=\"请选择脚本链\"\r\n            style=\"width: 100%\"\r\n          >\r\n            <el-option \r\n              v-for=\"chain in chains\" \r\n              :key=\"chain.id\" \r\n              :label=\"chain.name\" \r\n              :value=\"chain.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"调度类型\" prop=\"schedule_type\">\r\n          <el-select v-model=\"editingTask.schedule_type\" placeholder=\"请选择调度类型\" style=\"width: 100%\">\r\n            <el-option label=\"Cron表达式\" value=\"cron\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"Cron表达式\" prop=\"cron_expression\">\r\n          <el-input v-model=\"editingTask.cron_expression\" placeholder=\"例如: 0 0 * * * (每天零点执行)\" />\r\n          <div class=\"hint-text\">\r\n            Cron表达式格式: 秒 分 时 日 月 星期<br />\r\n            例如:<br />\r\n            \"0 0 * * * *\" - 每小时整点执行<br />\r\n            \"0 0 0 * * *\" - 每天零点执行<br />\r\n            \"0 0 0 * * 1\" - 每周一零点执行<br />\r\n            \"0 0 12 1 * *\" - 每月1日中午12点执行\r\n          </div>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"参数\" prop=\"params\">\r\n          <el-input \r\n            v-model=\"paramsString\" \r\n            type=\"textarea\" \r\n            :rows=\"5\" \r\n            placeholder='请以JSON格式输入参数，例如: {\"name\": \"value\"}'\r\n          />\r\n          <div class=\"hint-text\">JSON格式的参数，将传递给脚本或脚本链执行</div>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"描述\" prop=\"description\">\r\n          <el-input \r\n            v-model=\"editingTask.description\" \r\n            type=\"textarea\" \r\n            :rows=\"3\" \r\n            placeholder=\"请输入任务描述\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"状态\" v-if=\"editingTask.id\">\r\n          <el-switch\r\n            v-model=\"editingTask.is_active\"\r\n            :active-value=\"1\"\r\n            :inactive-value=\"0\"\r\n            active-text=\"启用\"\r\n            inactive-text=\"禁用\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      \r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveTask\" :loading=\"saving\">\r\n          保存\r\n        </el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'ScheduledTasksView',\r\n  data() {\r\n    return {\r\n      tasks: [],\r\n      scripts: [],\r\n      chains: [],\r\n      loading: false,\r\n      dialogVisible: false,\r\n      activeFilter: null,\r\n      saving: false,\r\n      executionTarget: 'script',\r\n      paramsString: '',\r\n      \r\n      editingTask: {\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        schedule_type: 'cron',\r\n        cron_expression: '',\r\n        script_id: null,\r\n        chain_id: null,\r\n        params: null,\r\n        is_active: 1\r\n      },\r\n      \r\n      rules: {\r\n        name: [{ required: true, message: '请输入任务名称', trigger: 'blur' }],\r\n        schedule_type: [{ required: true, message: '请选择调度类型', trigger: 'change' }],\r\n        cron_expression: [{ required: true, message: '请输入Cron表达式', trigger: 'blur' }],\r\n        script_id: [{ \r\n          required: true, \r\n          message: '请选择脚本', \r\n          trigger: 'change',\r\n          validator: (rule, value, callback) => {\r\n            if (this.executionTarget === 'script' && !value) {\r\n              callback(new Error('请选择脚本'))\r\n            } else {\r\n              callback()\r\n            }\r\n          }\r\n        }],\r\n        chain_id: [{ \r\n          required: true, \r\n          message: '请选择脚本链', \r\n          trigger: 'change',\r\n          validator: (rule, value, callback) => {\r\n            if (this.executionTarget === 'chain' && !value) {\r\n              callback(new Error('请选择脚本链'))\r\n            } else {\r\n              callback()\r\n            }\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    paramsString: {\r\n      handler(val) {\r\n        if (val) {\r\n          try {\r\n            this.editingTask.params = JSON.parse(val)\r\n          } catch (e) {\r\n            // 不是有效的JSON，保留字符串\r\n            console.log('参数不是有效的JSON格式')\r\n          }\r\n        } else {\r\n          this.editingTask.params = null\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.loadTasks()\r\n    this.loadScripts()\r\n    this.loadChains()\r\n  },\r\n  methods: {\r\n    async loadTasks() {\r\n      this.loading = true\r\n      try {\r\n        let url = '/api/schedule'\r\n        if (this.activeFilter !== null) {\r\n          url += `?is_active=${this.activeFilter}`\r\n        }\r\n        const response = await axios.get(url)\r\n        if (response.data.code === 0) {\r\n          this.tasks = response.data.data\r\n        } else {\r\n          this.$message.error(response.data.message || '获取定时任务列表失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('加载定时任务失败:', error)\r\n        this.$message.error('加载定时任务失败: ' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    async loadScripts() {\r\n      try {\r\n        const response = await axios.get('/api/scripts')\r\n        if (response.data.code === 0) {\r\n          this.scripts = response.data.data\r\n        }\r\n      } catch (error) {\r\n        console.error('加载脚本列表失败:', error)\r\n      }\r\n    },\r\n    \r\n    async loadChains() {\r\n      try {\r\n        const response = await axios.get('/api/chains')\r\n        if (response.data.code === 0) {\r\n          this.chains = response.data.data\r\n        }\r\n      } catch (error) {\r\n        console.error('加载脚本链列表失败:', error)\r\n      }\r\n    },\r\n\r\n    getScheduleTypeText(type) {\r\n      const map = {\r\n        'cron': 'Cron表达式',\r\n        'interval': '时间间隔',\r\n        'date': '指定日期'\r\n      }\r\n      return map[type] || type\r\n    },\r\n\r\n    openTaskForm(task = null) {\r\n      this.resetForm()\r\n      \r\n      if (task) {\r\n        Object.assign(this.editingTask, task)\r\n        \r\n        // 设置执行目标\r\n        if (task.script_id) {\r\n          this.executionTarget = 'script'\r\n        } else if (task.chain_id) {\r\n          this.executionTarget = 'chain'\r\n        }\r\n        \r\n        // 将参数对象转为JSON字符串\r\n        if (task.params) {\r\n          if (typeof task.params === 'string') {\r\n            try {\r\n              this.paramsString = JSON.stringify(JSON.parse(task.params), null, 2)\r\n            } catch (e) {\r\n              this.paramsString = task.params\r\n            }\r\n          } else {\r\n            this.paramsString = JSON.stringify(task.params, null, 2)\r\n          }\r\n        } else {\r\n          this.paramsString = ''\r\n        }\r\n      }\r\n      \r\n      this.dialogVisible = true\r\n    },\r\n\r\n    resetForm() {\r\n      this.editingTask = {\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        schedule_type: 'cron',\r\n        cron_expression: '',\r\n        script_id: null,\r\n        chain_id: null,\r\n        params: null,\r\n        is_active: 1\r\n      }\r\n      \r\n      this.executionTarget = 'script'\r\n      this.paramsString = ''\r\n      \r\n      if (this.$refs.taskForm) {\r\n        this.$refs.taskForm.resetFields()\r\n      }\r\n    },\r\n    \r\n    handleTargetChange(target) {\r\n      if (target === 'script') {\r\n        this.editingTask.chain_id = null\r\n      } else {\r\n        this.editingTask.script_id = null\r\n      }\r\n    },\r\n\r\n    async saveTask() {\r\n      if (!this.$refs.taskForm) return\r\n      \r\n      this.$refs.taskForm.validate(async (valid) => {\r\n        if (!valid) return\r\n        \r\n        // 检查执行目标是否已选择\r\n        if (!this.editingTask.script_id && !this.editingTask.chain_id) {\r\n          this.$message.warning('请选择脚本或脚本链')\r\n          return\r\n        }\r\n        \r\n        this.saving = true\r\n        \r\n        try {\r\n          // 准备要发送的数据\r\n          const taskData = { ...this.editingTask }\r\n          \r\n          // 处理参数\r\n          if (this.paramsString) {\r\n            try {\r\n              taskData.params = JSON.parse(this.paramsString)\r\n            } catch (e) {\r\n              this.$message.warning('参数格式不正确，请检查JSON格式')\r\n              this.saving = false\r\n              return\r\n            }\r\n          } else {\r\n            taskData.params = null\r\n          }\r\n          \r\n          let response\r\n          \r\n          if (this.editingTask.id) {\r\n            // 更新现有任务\r\n            response = await axios.put(`/api/schedule/${this.editingTask.id}`, taskData)\r\n          } else {\r\n            // 创建新任务\r\n            response = await axios.post('/api/schedule', taskData)\r\n          }\r\n          \r\n          if (response.data.code === 0) {\r\n            this.$message.success(response.data.message || '保存定时任务成功')\r\n            this.dialogVisible = false\r\n            this.loadTasks()\r\n          } else {\r\n            this.$message.error(response.data.message || '保存定时任务失败')\r\n          }\r\n        } catch (error) {\r\n          console.error('保存定时任务失败:', error)\r\n          this.$message.error('保存定时任务失败: ' + error.message)\r\n        } finally {\r\n          this.saving = false\r\n        }\r\n      })\r\n    },\r\n\r\n    async toggleActive(task) {\r\n      try {\r\n        const newStatus = task.is_active ? 0 : 1\r\n        const response = await axios.put(`/api/schedule/${task.id}/active`, {\r\n          is_active: newStatus\r\n        })\r\n        \r\n        if (response.data.code === 0) {\r\n          this.$message.success(response.data.message || `定时任务${newStatus ? '启用' : '禁用'}成功`)\r\n          this.loadTasks()\r\n        } else {\r\n          this.$message.error(response.data.message || '操作失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('切换任务状态失败:', error)\r\n        this.$message.error('操作失败: ' + error.message)\r\n      }\r\n    },\r\n\r\n    confirmDelete(task) {\r\n      this.$confirm(\r\n        `确定要删除定时任务 \"${task.name}\" 吗？删除后将无法恢复。`,\r\n        '删除确认',\r\n        {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }\r\n      ).then(async () => {\r\n        try {\r\n          const response = await axios.delete(`/api/schedule/${task.id}`)\r\n          \r\n          if (response.data.code === 0) {\r\n            this.$message.success('删除定时任务成功')\r\n            this.loadTasks()\r\n          } else {\r\n            this.$message.error(response.data.message || '删除定时任务失败')\r\n          }\r\n        } catch (error) {\r\n          console.error('删除定时任务失败:', error)\r\n          this.$message.error('删除定时任务失败: ' + error.message)\r\n        }\r\n      }).catch(() => {})\r\n    },\r\n\r\n    viewScript(scriptId) {\r\n      this.$router.push(`/scripts/${scriptId}`)\r\n    },\r\n    \r\n    viewChain(chainId) {\r\n      this.$router.push(`/chains/${chainId}`)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.scheduled-tasks-container {\r\n  padding: 20px;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.hint-text {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  margin-top: 5px;\r\n}\r\n</style>\r\n"]}]}